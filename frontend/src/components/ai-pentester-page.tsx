"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Bot, Terminal, Loader2, Shield, Zap } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";

const FormSchema = z.object({
  command: z.string().min(1, {
    message: "Please enter a command or natural language request.",
  }),
});

type CommandResult = {
  command: string;
  output: string;
  error?: string;
  timestamp: Date;
};

export function AIPentesterPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [commandHistory, setCommandHistory] = useState<CommandResult[]>([]);
  const [isConnected, setIsConnected] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      command: "",
    },
  });

  async function onSubmit(data: z.infer<typeof FormSchema>) {
    setIsLoading(true);
    
    try {
      // Simulate AI processing and command execution
      const response = await fetch('/api/execute-command', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ command: data.command }),
      });

      const result = await response.json();
      
      if (result.success) {
        const newResult: CommandResult = {
          command: data.command,
          output: result.output,
          error: result.error,
          timestamp: new Date(),
        };
        
        setCommandHistory(prev => [newResult, ...prev]);
        
        toast({
          title: "Command Executed",
          description: "Command has been executed on Kali Linux VM.",
        });
      } else {
        toast({
          variant: "destructive",
          title: "Error",
          description: result.error || "Failed to execute command.",
        });
      }
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Connection Error",
        description: "Failed to connect to Kali Linux VM.",
      });
    } finally {
      setIsLoading(false);
      form.reset();
    }
  }

  const handleConnect = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/connect-kali', {
        method: 'POST',
      });
      const result = await response.json();
      
      if (result.success) {
        setIsConnected(true);
        toast({
          title: "Connected",
          description: "Successfully connected to Kali Linux VM.",
        });
      } else {
        toast({
          variant: "destructive",
          title: "Connection Failed",
          description: result.error || "Failed to connect to Kali Linux VM.",
        });
      }
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Connection Error",
        description: "Failed to establish connection.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="grid gap-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold font-headline flex items-center gap-2">
            <Shield className="h-8 w-8 text-primary" />
            AI Pentester
          </h1>
          <p className="text-muted-foreground">
            Execute commands on Kali Linux VM using natural language or direct commands.
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant={isConnected ? "default" : "destructive"}>
            {isConnected ? "Connected" : "Disconnected"}
          </Badge>
          <Button 
            onClick={handleConnect} 
            disabled={isLoading || isConnected}
            variant="outline"
          >
            {isLoading ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Terminal className="mr-2 h-4 w-4" />
            )}
            {isConnected ? "Connected" : "Connect to Kali"}
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bot className="h-5 w-5" />
            Command Interface
          </CardTitle>
          <CardDescription>
            Enter a natural language request or direct command to execute on the Kali Linux VM.
          </CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="command"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Command or Request</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="e.g., 'scan for open ports on 192.168.1.1' or 'nmap -sS 192.168.1.1'"
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardFooter>
              <Button type="submit" disabled={isLoading || !isConnected}>
                {isLoading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Zap className="mr-2 h-4 w-4" />
                )}
                Execute Command
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>

      {commandHistory.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Terminal className="h-5 w-5" />
              Command History
            </CardTitle>
            <CardDescription>
              Recent commands executed on the Kali Linux VM.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {commandHistory.map((result, index) => (
              <div key={index} className="space-y-2">
                <div className="flex items-center justify-between">
                  <Badge variant="outline" className="font-mono text-xs">
                    {result.timestamp.toLocaleTimeString()}
                  </Badge>
                  {result.error && (
                    <Badge variant="destructive">Error</Badge>
                  )}
                </div>
                <div className="bg-muted p-3 rounded-md">
                  <p className="text-sm font-medium mb-2">Command:</p>
                  <code className="text-sm bg-background p-2 rounded block">
                    {result.command}
                  </code>
                </div>
                {result.output && (
                  <div className="bg-green-50 dark:bg-green-950 p-3 rounded-md">
                    <p className="text-sm font-medium mb-2 text-green-800 dark:text-green-200">Output:</p>
                    <pre className="text-sm text-green-700 dark:text-green-300 whitespace-pre-wrap">
                      {result.output}
                    </pre>
                  </div>
                )}
                {result.error && (
                  <div className="bg-red-50 dark:bg-red-950 p-3 rounded-md">
                    <p className="text-sm font-medium mb-2 text-red-800 dark:text-red-200">Error:</p>
                    <pre className="text-sm text-red-700 dark:text-red-300 whitespace-pre-wrap">
                      {result.error}
                    </pre>
                  </div>
                )}
                {index < commandHistory.length - 1 && <Separator />}
              </div>
            ))}
          </CardContent>
        </Card>
      )}
    </div>
  );
}