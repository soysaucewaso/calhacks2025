name,section name,1-sentence granular constraint,1-sentence kali test
Endpoint Enumeration,Access Control,"Discover and inventory all hidden and unlinked endpoints including APIs and admin paths.","Use gobuster/ffuf to enumerate directories and Burp to crawl the app, confirming responses and access requirements."
Horizontal Access,Access Control,"Verify users cannot access peer resources by changing object identifiers or request parameters.","Change numeric/UUID IDs in requests with Burp Repeater and confirm any unauthorized access to other users' data."
Vertical Escalation,Access Control,"Confirm lower-privilege accounts cannot perform privileged actions or access admin functionality.","Use two accounts and replay admin requests with a low-privilege session token to check for missing authorization checks."
TLS Configuration,Crypto Failures,"Ensure TLS is properly configured with no weak ciphers, expired certs, or missing HSTS.","Run testssl.sh or sslyze against HTTPS endpoints to enumerate cipher suites, protocol versions, and header presence."
Weak Algorithms,Crypto Failures,"Detect use of weak/obsolete cryptographic algorithms (e.g., MD5, SHA1, RC4) in transport or storage.","Inspect responses and configs via Burp and grep for hashing usages, then validate with openssl and manual checks for weak schemes."
Secrets Exposure,Crypto Failures,"Identify secrets or keys transmitted in plaintext or leaked in responses, configs, or source files.","Search responses and repository files for API keys/credentials and confirm via Burp that sensitive fields are sent unencrypted."
SQL Injection,Code Injection,"Find inputs where SQL queries are constructed from unsanitized user input leading to data access or modification.","Run sqlmap against injectable parameters and confirm with manual Boolean/time-based payloads using Burp Intruder or Repeater."
Command Injection,Code Injection,"Detect parameters that are passed to OS commands without proper sanitization allowing arbitrary command execution.","Fuzz command-like parameters with payloads (e.g., `;id`, `&& cat /etc/passwd`) via Burp and verify command execution output."
Template/NoSQL Injection,Code Injection,"Test template engines and NoSQL query builders for injection that leads to logic execution or data leaks.","Send crafted payloads to template/NoSQL parameters with Burp and monitor for server errors, stack traces, or altered query behavior."
Logic Bypass,Design Flaws,"Check business workflows for missing state checks that allow skipped steps, unauthorized flows, or abuse cases.","Simulate out-of-order workflows with automation (curl/Burp) to bypass intended checks and validate application state invariants."
Race Condition,Design Flaws,"Identify concurrent actions that can create inconsistent state, duplicate transactions, or privilege escalation.","Use parallel requests or Burp Intruder to trigger race windows on critical endpoints (e.g., purchase, transfer) and observe inconsistent outcomes."
Default Credentials,Config Errors,"Look for services and management interfaces using vendor-default or easily guessable credentials.","Run nmap service discovery followed by trying default/admin credentials on exposed management ports and web admin pages."
Exposed Services,Config Errors,"Detect unnecessary or dangerous services and endpoints (e.g., open admin consoles, database ports) exposed to the network.","Scan with nmap -sV and nikto to find open services, then attempt safe interaction to confirm functionality and exposure."
Permissive CORS,Config Errors,"Verify CORS allows overly broad origins or methods enabling cross-origin token leakage or unauthorized requests.","Inspect CORS headers via curl -I and Burp, then craft cross-origin requests from a malicious origin to test if sensitive endpoints accept them."
Dependency CVEs,Outdated Components,"Inventory components and check for known vulnerabilities and unpatched versions in libs, frameworks, and servers.","Fingerprint technologies with whatweb/wappalyzer and cross-check versions against CVE databases or use searchsploit for known exploits."
Unpatched Frameworks,Outdated Components,"Identify application frameworks or server stacks with end-of-life or unpatched releases that contain critical fixes.","Use nmap -sV/whatweb to detect framework versions and verify exploitability with controlled PoCs or CVE lookups (do not exploit production)."
Weak Passwords,Auth Failures,"Ensure password policies enforce complexity and lockout to prevent trivial brute-force or credential stuffing.","Perform controlled, authorized password spraying or hydra tests on login endpoints and verify lockout/rate-limit behavior."
Broken MFA,Auth Failures,"Confirm multi-factor authentication is properly enforced and resistant to bypass or OTP replay attacks.","Test MFA flows by intercepting and replaying OTPs, testing backup code behavior, and verifying bypass via session fixation or recovery flows."
Session Fixation,Auth Failures,"Check that sessions/tokens are rotated on privilege changes and invalidated at logout to prevent reuse.","Capture session tokens with Burp, attempt reuse after logout or privilege change, and check if tokens remain valid or are rotated."
Unsafe Deserialization,Integrity Failures,"Detect endpoints deserializing untrusted data that can lead to remote code execution or object manipulation.","Send crafted serialized payloads (language-appropriate) to deserialization endpoints and observe for exceptions, errors, or command execution indicators."
Unsigned Updates,Integrity Failures,"Verify update mechanisms and downloadable artifacts are signed and validated to prevent tampering.","Interact with update endpoints and download artifacts, then check for signatures or integrity checks and attempt authorized replay/tamper tests against a staging target."
CI/CD Tampering,Integrity Failures,"Assess CI/CD and artifact pipelines for weak access controls or unauthenticated webhook endpoints that allow malicious deployments.","Probe accessible webhook/API endpoints with Burp to replay or craft payloads and inspect pipeline triggers or artifact retrieval behaviors for missing auth."
Missing Alerts,Logging Failures,"Ensure critical events generate alerts and are logged with sufficient detail for detection and response.","Trigger authentication failures or privilege attempts and verify whether the application or logging endpoint records events and generates alerts accessible to defenders."
PII in Logs,Logging Failures,"Check logs for sensitive personal data or credentials that violate data handling and increase breach impact.","Cause representative actions that include PII and, where log access is permitted, inspect logs or endpoints to confirm whether sensitive fields are recorded."
Log Tamperability,Logging Failures,"Ensure logs are protected from client-side tampering and that log retrieval APIs require strict authorization.","Attempt to modify client-supplied log-related fields or access log APIs with insufficient credentials to verify tamper resistance and access controls."
Open Redirects,SSRF Vectors,"Find redirect or URL parameters that accept arbitrary destinations enabling SSRF, phishing, or open-redirect abuse.","Use Burp to modify redirect/return URL parameters to point to attacker-controlled hosts and observe whether the server follows or validates destinations."
URL Fetch Abuse,SSRF Vectors,"Detect server-side fetch functionality that allows arbitrary URLs or protocols, enabling internal scanning or outbound request abuse.","Fuzz URL parameters with internal IPs and protocol schemes (file://, gopher://) using Burp Intruder and check for outbound request behavior or internal resource access."
Metadata Access,SSRF Vectors,"Confirm web app cannot be tricked into contacting cloud metadata or internal management endpoints exposing secrets.","Craft SSRF payloads targeting common metadata IPs (e.g., 169.254.169.254) via Burp and use a collaborator server to detect if the app performs the request and returns sensitive data."
